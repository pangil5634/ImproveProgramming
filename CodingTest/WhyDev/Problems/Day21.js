//  문제 내용
/*
    요세푸스 문제는 다음과 같다.
    
    1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 
    이제 순서대로 K번째 사람을 제거한다. 
    한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 
    이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 
    원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 
    예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.

    N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.
*/

//  문제 분석
/*
    - 이진수 : 0과 1로만 이루어진 수
    - 이친수 : 0으로 시작하지 않고, 1이 두 번 연속 나타나지 않는다.
    - 예 : 1, 10, 100, 101, 1000, 1011 등
*/

//  문제 조건

/*
    입력
    - 첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 1,000)

    출력
    - 예제와 같이 요세푸스 순열을 출력한다.
*/

//  예제 입력 및 출력
/*
    입력
    7 3
    출력
    <3, 6, 2, 7, 5, 1, 4>
*/



// 입력을 파일에서 읽어옴
const fs = require('fs');
const [N, K] = fs.readFileSync('/dev/stdin').toString().trim().split(" ").map(Number);

// 1번부터 N번까지 사람을 배열에 저장
const array = [];
for (let i = 1; i <= N; i++) {
    array.push(i);
}

// 제거되는 순서를 저장할 배열
const result = [];
let idx = 0;

// 사람이 모두 제거될 때까지 반복
while (array.length > 0) {
    // K번째 사람의 인덱스를 계산
    idx = (idx + K - 1) % array.length;
    // 해당 사람을 제거하고 결과에 추가
    // array.splice(idx, 1)[0]:
    // (1) splice(idx, 1) : 배열 array에서 idx 번째 요소 1개를 제거하고, 그 제거된 요소를 배열로 반환.
    // (2) [0] : splice()가 반환한 배열의 첫 번째 요소를 꺼냄.
    result.push(array.splice(idx, 1)[0]);
}

// 결과를 형식에 맞게 출력
console.log(`<${result.join(', ')}>`);





